# From https://spin.atomicobject.com/2016/08/26/makefile-c-projects/

# The directory to build in. 
# This is an out of source build. It makes it easier to clean and keep from
# polluting the source tree with stuff that doesn't need to be tracked by
# git. It is a directory above the directory this Makefile is in.
BUILD_DIR ?= ./build

# What we will ultimately build. The executable program.
TARGET_EXEC ?= parser_exc

# The directories that source files are to be found. For relatively simple
# projects 1 directory is sufficient. For more complex projects more
# directories may be required.
SRC_DIRS ?= src

# The source files. This finds anything with the extension *.cpp, *.c and
# *.s. C++, C, and assembly files respectively.
SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)

# The object files. Decorated with the path to the build directory.
# So for example main.cpp in ./src will be "../build/main.o"
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# Dependancies. Modern IDEs figure out dependancies automatically. This
# allows the make file to automatically track dependancies by using the
# -MMD flag on the gnu compiler. Cool!
DEPS := $(OBJS:.o=.d)

# Include directories. These are for your includes. But if for some reason
# You are using some external library that is not known to the compiler
# others may be needed. Here we pick up only those in SRC_DIRS. 
# Some like the convention of placing include files in an include directory
# sitting alongside the src directory.
INC_DIRS := $(shell find $(SRC_DIRS) -type d)
# Flags to tell the compiler where to look for include files. 
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# Flags to control what warnings are generated by the compiler. Warnings
# are very useful to creating reliable programs. Many common, and not so
# common coding errors can be detected by modern compilers. The more
# that are detected at compile time the better as it makes the code
# less likely to fail. Most warnings can be suppressed using #pragmas
# in the unlikely case that the code is written the way you really want.
WARNINGFLAGS ?= -Wall -Wextra

# Compiler flags. First the places to look for include files, then
# -MMD and -MP to tell the compiler to generate dependancy files.
CPPFLAGS ?= $(INC_FLAGS) -MMD -MP $(WARNINGFLAGS)

CXXFLAGS ?= --std=c++17 -lstdc++fs

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CXX) $(OBJS) -o $@ $(LDFLAGS)

# Rule to build assembly files. ASFLAGS is not set so will be blank.
$(BUILD_DIR)/%.s.o: %.s
	$(MKDIR_P) $(dir $@)
	$(AS) $(ASFLAGS) -c $< -o $@

# Rule to build C files. CFLAGS is for C specific compilation and is
# not set. It can be set as needed.
$(BUILD_DIR)/%.c.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Rule to build C++ files. CXXFLAGS is for C++ specific compilation options.
$(BUILD_DIR)/%.cpp.o: %.cpp
	$(MKDIR_P) $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


# Set things up for testing. Input and output directories
OUT_DIR ?= out
CCX_DIR ?= ccx

# All of the .cci and ccx files
LEXER_CCI_IN := $(wildcard $(CCX_DIR)/*.cci)
LEXER_CCX_IN := $(wildcard $(CCX_DIR)/*.ccx)
LEXER_IN := $(notdir $(LEXER_CCI_IN)) $(notdir $(LEXER_CCX_IN))

# The files we want to generate.
LEXER_OUT := $(LEXER_IN:%=$(OUT_DIR)/%.lexer.out)

# The lexer.out files in the output directory depend on the LEXER_IN files
# and the executable
# We run out lexer, then run diff on the output.
# Testing will stop on the first failure due to the return from diff
# diff will output the differences so we can see what isn't working.
$(OUT_DIR)/%.lexer.out: $(CCX_DIR)/%
#	echo $(LEXER_IN)
	echo $(BUILD_DIR)/$(TARGET_EXEC) $<
	$(BUILD_DIR)/$(TARGET_EXEC) $<
	diff -s $(OUT_DIR)/$(<F).lexer.out $(CCX_DIR)/$(<F).lexer.out  

test1: $(OUT_DIR)/complex.cci.lexer.out\
	$(OUT_DIR)/complex.ccx.lexer.out\
	$(OUT_DIR)/list.cci.lexer.out\
	$(OUT_DIR)/list.ccx.lexer.out\
	$(OUT_DIR)/date.cci.lexer.out\
	$(OUT_DIR)/date.ccx.lexer.out\
	$(OUT_DIR)/natural.cci.lexer.out\
	$(OUT_DIR)/natural.ccx.lexer.out\
	$(OUT_DIR)/trie.cci.lexer.out\
	$(OUT_DIR)/widget.ccx.lexer.out\
	$(OUT_DIR)/widget.cci.lexer.out
	echo "running tests"

test: $(BUILD_DIR)/$(TARGET_EXEC) $(LEXER_OUT) 
#	echo "That's better!"
#	echo $(LEXER_OUT)

testone:  $(BUILD_DIR)/$(TARGET_EXEC) $(OUT_DIR)/natural.ccx.lexer.out
	

# Only do clean explicitly. (make clean)
.PHONY: clean

clean:
	$(RM) -r $(BUILD_DIR)
	$(RM) -r $(OUT_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
